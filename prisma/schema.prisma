// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Organization {
  id          Int          @id @default(autoincrement())
  pid         String       @unique @default(uuid())
  name        String
  subjects    Subject[]
  instructors Instructor[]
  students    Student[]
  payers      Payer[]
}

model Instructor {
  id             Int          @id @default(autoincrement())
  pid            String       @unique @default(uuid())
  name           String
  organizationId Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
  subjects       Subject[]
}

model Subject {
  id             Int          @id @default(autoincrement())
  pid            String       @unique @default(uuid())
  name           String
  organizationId Int
  Organization   Organization @relation(fields: [organizationId], references: [id])
  instructors    Instructor[]
}

enum StudentBillingType {
  self
  payer
}

/// A student may either have a payer or their own payment method, but not both.
/// This rule must be enforced in application logic.
model Student {
  id             Int                @id @default(autoincrement())
  pid            String             @unique @default(uuid())
  name           String
  billingType    StudentBillingType
  organizationId Int
  payerId        Int?
  organization   Organization       @relation(fields: [organizationId], references: [id])
  payer          Payer?             @relation(fields: [payerId], references: [id])
  PaymentMethod  PaymentMethod?
}

model Payer {
  id             Int            @id @default(autoincrement())
  pid            String         @unique @default(uuid())
  name           String
  organizationId Int
  organization   Organization   @relation(fields: [organizationId], references: [id])
  PaymentMethod  PaymentMethod?
  students       Student[]
}

enum PaymentMethodOwnerType {
  student
  payer
}

/// A payment method must belong to either a payer or a student, but not both.
/// This mutual exclusivity must be enforced in application logic.
model PaymentMethod {
  id        Int                    @id @default(autoincrement())
  name      String
  ownerType PaymentMethodOwnerType
  payerId   Int?                   @unique
  studentId Int?                   @unique
  payer     Payer?                 @relation(fields: [payerId], references: [id])
  student   Student?               @relation(fields: [studentId], references: [id])
}
